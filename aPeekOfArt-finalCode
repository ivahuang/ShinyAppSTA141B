library(tidyverse)
library(jsonlite)
library(shiny)
library(plotly)
library(httr)

# generate the data
mydata3<-data.frame()

for (i in 1:80){
  r <- GET(
    "https://api.harvardartmuseums.org/Object",
    query = list(
      apikey = Sys.getenv("KEY"),
      page = i
    )
  )
  
  stop_for_status(r)
  json <- content(r, as = "text")
  
  k <- as.data.frame(fromJSON(json)) %>% 
    select(records.title,records.accessionyear,records.url,records.images,records.culture,records.division,records.century,records.classification,records.people)
  
  mydata3 <- rbind(mydata3,k)
}

createLink <- function(val) {
  sprintf('<a href="https://www.google.com/#q=%s" target="_blank" class="btn btn-primary">Info</a>', val)
}

ui <- fluidPage(
  
  #Application title
  titlePanel("Explore Harvard Art Museum"),
  
  # Sidebar with a slider input
  sidebarLayout(
    sidebarPanel(
      selectInput(inputId = "century",
                  label = "Select century of the exhibits:",
                  choices = unique(mydata3$records.century),
                  selected = "17th century")
    ),
  
  mainPanel(
    tabsetPanel(tabPanel("Exhibit's Details",  dataTableOutput("detail")),
                tabPanel("What Culture the Exhibit Comes From", plotlyOutput(outputId = "pieChart"))
                )
  )
)
)

server <- function(input, output) {
  
  #Filter based on input
  aa <- reactive({
    filter(mydata3, !str_detect(records.century, "NA")) %>% 
      filter(records.century == input$century)
  })
  
  # Render data table for selected flights
  output$dtab <- renderDataTable(aa())
  
  output$pieChart <- renderPlotly({
    aa <- aa()
    fig <- plot_ly(aa, labels = ~records.culture, values = ~records.accessionyear, type = 'pie') %>% 
      layout(title = paste('Piechat of Culture Based on', input$century),
                          xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                          yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
               
    
    fig
  })
  
  # Generate min, max, mean and median of corresponding arrival delay
  output$detail <- renderDataTable({
    aa <- aa()
    
    my_table <- filter(aa, records.century == input$century) %>%
      select(records.title, records.accessionyear, records.classification, records.url) %>% 
      rename(Title = records.title, Year = records.accessionyear, Details = records.url, Classification = records.classification)
    
    my_table$Details <- createLink(my_table$Details)
    
    my_table
  }, escape = FALSE)
}

# Create Shiny app
shinyApp(ui = ui, server = server)
